/**
 * //@Cacheable 将在执行方法之前( #result还拿不到返回值)判断condition，如果返回true，则查缓存；
 * @Cacheable(value = "user", key = "#id", condition = "#id lt 10")
 * public User conditionFindById(final Long id)
 *
 * //@CachePut将在执行完方法后（#result就能拿到返回值了）判断condition，如果返回true，则放入缓存；
 * @CachePut(value = "user", key = "#id", condition = "#result.username ne 'zhang'")
 * public User conditionSave(final User user)
 *
 * //@CachePut将在执行完方法后（#result就能拿到返回值了）判断unless，如果返回false，则放入缓存；（即跟condition相反）
 * @CachePut(value = "user", key = "#user.id", unless = "#result.username eq 'zhang'")
 * public User conditionSave2(final User user)
 *
 * //@CacheEvict， beforeInvocation=false表示在方法执行之后调用（#result能拿到返回值了）；且判断condition，如果返回true，则移除缓存；
 * @CacheEvict(value = "user", key = "#user.id", beforeInvocation = false, condition = "#result.username ne 'zhang'")
 * public User conditionDelete(final User user)
 *
 * condition 不指定相当于 true，unless 不指定相当于 false
 * 　　　　当 condition = false，一定不会缓存；
 * 　　　　当 condition = true，且 unless = true，不缓存；
 * 　　　　当 condition = true，且 unless = false，缓存；
 *
 * id—>user; username—>id; email—>id;
 * @Cacheable(value="cacheName", key="#user.username", cacheValue="#caches[0].get(#caches[0].get(#username).get())")
 * public User findByUsername(String username)
 */


---

<ehcache>

    <!--
        磁盘存储:将缓存中暂时不使用的对象,转移到硬盘,类似于Windows系统的虚拟内存
        path:指定在硬盘上存储对象的路径
        path可以配置的目录有：
            user.home（用户的家目录）
            user.dir（用户当前的工作目录）
            java.io.tmpdir（默认的临时目录）
            ehcache.disk.store.dir（ehcache的配置目录）
            绝对路径（如：d:\\ehcache）
        查看路径方法：String tmpDir = System.getProperty("java.io.tmpdir");
     -->
    <diskStore path="java.io.tmpdir/ehcache" />

    <!--
                Programme will not throw error, when the cache hits to limit it will clean some cached objects.
 				name 缓存空间名称（非缓存key）
                maxElementsInMemory：设置了缓存的上限,最多存储多少个记录对象
				maxElementsOnDisk：硬盘中最大缓存对象数，若是0表示无穷大
				eternal：true 表示对象永不过期，此时会忽略timeToIdleSeconds和timeToLiveSeconds属性，默认为false
				overflowToDisk：true表示当内存缓存的对象数目达到了maxElementsInMemory界限后，会把溢出的对象写到硬盘缓存中。注意：如果缓存的对象要写入到硬盘中的话，则该对象必须实现了Serializable接口才行。
				diskSpoolBufferSizeMB：磁盘缓存区大小，默认为30MB。每个Cache都应该有自己的一个缓存区。
				diskPersistent：是否缓存虚拟机重启期数据，设置成true表示缓存虚拟机重启期数据
				diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认为120秒
				timeToIdleSeconds： 设定允许对象处于空闲状态的最长时间，以秒为单位。当对象自从最近一次被访问后，如果处于空闲状态的时间超过了timeToIdleSeconds属性值，这个对象就会过期，EHCache将把它从缓存中清空。只有当eternal属性为false，该属性才有效。如果该属性值为0，则表示对象可以无限期地处于空闲状态
				timeToLiveSeconds：设定对象允许存在于缓存中的最长时间，以秒为单位。当对象自从被存放到缓存中后，如果处于缓存中的时间超过了 timeToLiveSeconds属性值，这个对象就会过期，EHCache将把它从缓存中清除。只有当eternal属性为false，该属性才有效。如果该属性值为0，则表示对象可以无限期地存在于缓存中。timeToLiveSeconds必须大于timeToIdleSeconds属性，才有意义

    		memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。
     -->
    <defaultCache maxElementsInMemory="10" maxElementsOnDisk="1000" eternal="false"
                  timeToIdleSeconds="600" timeToLiveSeconds="600" overflowToDisk="true" />

    <cache name="myCache" maxElementsInMemory="5" maxElementsOnDisk="500" eternal="true"
           timeToIdleSeconds="0" timeToLiveSeconds="0" overflowToDisk="true" diskSpoolBufferSizeMB="10240"/>

</ehcache>