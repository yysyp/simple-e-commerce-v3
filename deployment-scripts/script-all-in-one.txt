
父进程里 export 的变量，子进程可以用。
子进程里 export的变量，父进程里不可见。
父进程=全局变量
子进程=局部变量
-------------------------------------------------------------------------------------------------
1, ./子脚本，此时会fork一个子shell来运行此脚本，会继承来自父shell的环境变量（必须用export声明，否则无法传递），
但是子shell中的环境变量不会返回道父shell中，【两个进程】。

2，.[空格]./子脚本，此时相当于函数中的内联函数的概念，子脚本中的内容会在此处通通展开，此时相当于一个shell环境
中执行所有的脚本内容，所以此时父子脚本中任何变量都可以共享（注意定义变量的顺序，在使用前声明）。【一个进程】。

3，exec ./子脚本，此时相当于接下来要执行的进程下文进行了替换，直接用子脚本中的内容替换了原来的进程内容，同时
会继承之前的环境变量，原来的执行内容相当于不存在了，直接执行完此子脚本，整个流程就结束了。【一个进程】。

================================================================
0authlogin.sh
----------------------------------------------------------------
#! /bin/bash
set -o nounset
set -o errexit
source 0env-set.sh

current_datetime_str=$(date +"%Y-%m-%d %H:%M:%S")

if [ ! -e "./authLogin.output" ]; then
    touch ./authLogin.output
    echo "1000-01-01 00:00:00" > ./authLogin.output
fi

last_datetime_str=`cat ./authLogin.output`
last_datetime=$(date -d "$last_datetime_str" +%s)
current_datetime=$(date -d "$current_datetime_str" +%s)
if (( $current_datetime - $last_datetime < 86400 )); then
  echo "Auth within 1 day."
else
  echo "To login"
  gcloud config set project $PROJECT_ID
  gcloud auth login
  echo "$current_datetime_str" > ./authLogin.output
fi


================================================================
0env-set.sh
----------------------------------------------------------------
#! /bin/bash
set -o nounset
set -o errexit
#sed -i 's/\r$//' *.sh

PROJECT_ID=xxx
ZONE=xxx
VM_NAME=my-vm-001
SA_ACCOUNT=auto_deploy@xxx.com
#LOCAL_FOLDER=LOCAL_FOLDER
LOGINUSER=ubuntu
USERNAME=nexus1
PASSWD=pass1

./0authlogin.sh
echo "Env set. VM_NAME=$VM_NAME"


================================================================
1vm-create-gcp.sh
----------------------------------------------------------------
#! /bin/bash
set -o nounset
set -o errexit
source 0env-set.sh

gcloud config list
gcloud auth login

gcloud beta compute instances create $VM_NAME --project=$PROJECT_ID --zone=$ZONE --machine-type=n1-standard-2 \
--network-interface=xxx \
--service-account=$SA_ACCOUNT
echo "VM created. vm=$VM_NAME"
echo "gcloud compute ssh $VM_NAME --zone $ZONE --internal-ip"



================================================================
2git-clone-appxxx.sh
----------------------------------------------------------------
#! /bin/bash
set -o nounset
set -o errexit
source 0env-set.sh

#rm -rf $LOCAL_FOLDER/aa/
#git clone --branch main --single-branch https://xxx/aa.git $LOCAL_FOLDER/aa
#echo "Git cloned to $LOCAL_FOLDER for uploading"

rm -rf ./appxxx/
git clone --branch main --single-branch https://xxx/aa.git appxxx
echo "Git cloned to appxxx for uploading"




================================================================
3scp-upload-appxxx.sh
----------------------------------------------------------------
#! /bin/bash
set -o nounset
set -o errexit
source 0env-set.sh

#gcloud compute scp --zone $ZONE --internal-ip --recurse "$LOCAL_FOLDER" $LOGINUSER@$VM_NAME:$REMOTE_FOLDER/
#gcloud compute scp --zone $ZONE --internal-ip "/c/tmp/abc.json" $LOGINUSER@$VM_NAME:$REMOTE_FOLDER/$DEPLOY_FOLDER/
#echo "Folder $LOCAL_FOLDER uploaded to remote VM"

gcloud compute scp --zone $ZONE --internal-ip --recurse "source-folder" $LOGINUSER@$VM_NAME:$REMOTE_FOLDER/
gcloud compute scp --zone $ZONE --internal-ip "/c/tmp/abc.json" $LOGINUSER@$VM_NAME:$REMOTE_FOLDER/
echo "Folder source-folder uploaded to remote VM"




================================================================
4remote-software-install-docker-jdk-mysqlindocker.sh
----------------------------------------------------------------
#! /bin/bash
set -o nounset
set -o errexit
source 0env-set.sh

cat > 4remote-software-install-docker-jdk-mysqlindocker-sub.sh <<- 'EOF'
#! /bin/bash
set -o nounset
set -o errexit
#sed -i 's/\r$//' *.sh

tar -xzvf dockerxxx.tgz
cp -f docker/* /usr/bin/
nohup dockerd > /dev/null 2>&1 &
echo 'Docker installed & started'

tar -xzvf OpenJDKxxx.tar.gz -C /opt
echo 'export JAVA_HOME="/opt/jdk-xxx"' >> ~/.bash_profile
echo 'PATH="$JAVA_HOME"/bin:$PATH' >> ~/.bash_profile
source ~/.bash_profile
java -version
echo 'Jdk installed'

APP_NAME=mysql57-with-init-sql
docker login -u $1 -p $2 nexusxxx:12345
CONTAINERID=$(docker ps -a| grep $APP_NAME | awk '{print $1}')
if [ -n "$CONTAINERID" ]; then
  echo "Stopping & remove mysql"
  docker rm -f $CONTAINERID
else
  echo "Mysql is not running"
fi

IMAGEID=$(docker images| grep $APP_NAME | awk '{print $1}')
if [ -n "$IMAGEID" ]; then
  docker rmi -f $APP_NAME
fi

docker build -t $APP_NAME -f docker-mysql/Dockerfile docker-mysql
docker run --name $APP_NAME -e MYSQL_ROOT_PASSWORD=root -d --add-host=host.docker.internal:host-gateway -p 3306:3306 $APP_NAME
#docker run --name $APP_NAME -e MYSQL_ROOT_PASSWORD=root -d --add-host=host.docker.internal:host-gateway -p 3306:3306 nexusxxx:12345/com/xx/mysql:5.7
sleep 5
CONTAINERID=$(docker ps -a| grep $APP_NAME | awk '{print $1}')
echo "docker mysql installed CONTAINERID=$CONTAINERID"


if [ ! -d "/usr/local/app1" ]; then
    echo 'Not exists, so mkdir'
    mkdir -p /usr/local/app1
else
    echo '/usr/local/app1 exists'
fi

EOF

gcloud compute scp --zone $ZONE --internal-ip "4remote-software-install-docker-jdk-mysqlindocker-sub.sh" $LOGINUSER@$VM_NAME:$REMOTE_FOLDER/
gcloud compute ssh $VM_NAME --zone $ZONE --internal-ip --command "cd $REMOTE_FOLDER && chmod 777 4remote-software-install-docker-jdk-mysqlindocker-sub.sh && sudo ./4remote-software-install-docker-jdk-mysqlindocker-sub.sh $USERNAME $PASSWD"
rm 4remote-software-install-docker-jdk-mysqlindocker-sub.sh
echo "Remote software installed"






================================================================
5app-redeploy-restart-appxxx.sh
----------------------------------------------------------------
#! /bin/bash
set -o nounset
set -o errexit
source 0env-set.sh
##--------------------------------------------------------------------------------##
#Usage: find & replace "appxxx" with the actual application name.
#Replace APP_FILE_NAME name "sample1-1.0.0" to the actual jar file name.
#Required ENVs: $ZONE $LOGINUSER $VM_NAME
##--------------------------------------------------------------------------------##
cat > 5app-redeploy-restart-appxxx-sub.sh <<- 'EOF'
#! /bin/bash
set -o nounset
set -o errexit
export JAVA_HOME="/opt/jdk-xxx"
export PATH="$JAVA_HOME"/bin:$PATH
APP_FILE_NAME=sample1-1.0.0
if [ ! -d "/usr/local/appxxx" ]; then
    echo '/usr/local/appxxx Not exists, so mkdir'
    mkdir -p /usr/local/appxxx
else
    echo '/usr/local/appxxx exists'
fi
if [ ! -d "/usr/local/appxxx/conf" ]; then
    echo '/usr/local/appxxx/conf Not exists, so mkdir'
    mkdir -p /usr/local/appxxx/conf
else
    echo '/usr/local/appxxx/conf exists'
fi
if [[ "$PWD" == "/usr/local/appxxx" ]]; then
  echo ""
else
  echo "copy."
  cp -f $APP_FILE_NAME.jar 5app-redeploy-restart-appxxx-sub.sh /usr/local/appxxx/
  cd /usr/local/appxxx
fi
#ps -ef | grep APP_FILE_NAME | grep -v grep | awk '{print $2}' | xargs kill -9
#ps -aux | grep APP_FILE_NAME | grep -v grep | awk '{print $2}' | xargs kill -9
#kill -s 9 `pgrep APP_FILE_NAME`
PID=`ps -eaf | grep $APP_FILE_NAME | grep -v grep | awk '{print $2}'`
if [[ "" != "$PID" ]]; then
  echo "killing $PID"
  kill -9 $PID
fi
nohup java -server -Dspring.profiles.active=dev -jar $APP_FILE_NAME.jar > /dev/null 2>&1 &
sleep 10
PID=`ps -eaf | grep $APP_FILE_NAME | grep -v grep | awk '{print $2}'`
echo "Started PID=$PID"
EOF

gcloud compute scp --zone $ZONE --internal-ip "5app-redeploy-restart-appxxx-sub.sh" $LOGINUSER@$VM_NAME:$REMOTE_FOLDER/
gcloud compute ssh $VM_NAME --zone $ZONE --internal-ip --command "cd $REMOTE_FOLDER && chmod 777 5app-redeploy-restart-appxxx-sub.sh && sudo ./5app-redeploy-restart-appxxx-sub.sh"
rm 5app-redeploy-restart-appxxx-sub.sh
echo "Remote appxxx redeployed"


================================================================
5-dockerd-gitclone-scp-restartapps.sh
----------------------------------------------------------------
#! /bin/bash
set -o nounset
set -o errexit
source 0env-set.sh

gcloud compute ssh $VM_NAME --zone $ZONE --internal-ip --command "sudo nohup dockerd > /dev/null 2>&1 &"

./2git-clone-appxxx.sh && ./3scp-upload-appxxx.sh

./5app-redeploy-restart-appxxx.sh


================================================================
Runnable principle
----------------------------------------------------------------
1, File/Folder creation need to add overwrite confirmation. i.e. echo 'y' | cp xxx xxx
    cp -f xxx.ini /usr/local/appxxx/conf/
2, Other resource creation/modification needs to add existing check.
   Deletion needs to add not existing check.


